buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.1"
        //plugin: 'org.jetbrains.intellij' conflict with plugin: "com.google.protobuf"
        //classpath "gradle.plugin.org.jetbrains:gradle-intellij-plugin:0.1.10"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.2.17"
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "com.google.protobuf"
apply plugin: 'org.jetbrains.intellij'

//
repositories {
    maven {
        url 'http://central.maven.org/maven2/'
    }
    maven {
        url 'http://www.datanucleus.org/downloads/maven2/'
    }

}


dependencies {
    compile('io.grpc:grpc-netty:1.6.1')
    compile('io.grpc:grpc-protobuf:1.6.1') {
        force true
    }
    compile('io.grpc:grpc-stub:1.6.1') {
        force true
    }
    compile('com.google.protobuf:protobuf-java:3.3.1') {
        force true
    }
    compile('io.grpc:grpc-core:1.6.1') {
        force true
    }
}


protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'

    }
    plugins {
        // Define a plugin with name 'grpc'
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.6.1'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

    generatedFilesBaseDir = "$projectDir/build/generated/source/proto"
}

clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        // If you have additional sourceSets and/or codegen plugins, add all of them
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")

    }
}


project.afterEvaluate {
    sourceSets {
        main {
            compileClasspath -= files(new File(intellij.ideaDependency.classes, "lib/protobuf-2.5.0.jar").getAbsolutePath(),
                    new File(intellij.ideaDependency.classes, "lib/studio-profiler-grpc-1.0-jarjar.jar").getAbsolutePath())

            project.logger.lifecycle("compileClasspath=" + compileClasspath.getFiles())
        }
    }
}

